import fs from 'fs';
import path from 'path';

import symbols from './symbols';

export interface TSDKConfig {
  packageDir: string;
  packageName: string;
  /** 'typeorm' or 'kysely' or 'DrizzleORM' */
  entityLibName: string | string[];
  baseDir: string;
  entityExt: string;
  apiconfExt: string;
  shareExt?: string;
  sharedDirs: string[];
  monorepoRoot?: string;
  /** default: xior */
  httpLib?: 'xior' | 'axios';
  dataHookLib?: 'SWR' | 'ReactQuery' | 'VueQuery' | ('SWR' | 'ReactQuery' | 'VueQuery')[];
  /** custom dependencies or override */
  dependencies?: { [key: string]: string };
  devDependencies?: { [key: string]: string };
  /** custom scripts or override */
  scripts?: { [key: string]: string };
  /** 
   * remove unnecessary fields in *.apiconf.js after build 
   * @default
   *  [
      'needAuth',
      'category',
      'description',
    ]
   */
  removeFields?: string[];
}

export const comment = `
/**
 * This is auto-generated by \`tsdk\`.
 * Do not edit this file.
 */
`;

let id = 0;

export const getDefaultContent = () =>
  `/** This line auto generated by \`tsdk\` and this will be removed if have content. */\nexport const test_${++id} = ${++id};`;

export const tsdkConfigFilePath = path.join(process.cwd(), 'tsdk.config.js');
export const isTsdkConfigExist = fs.existsSync(tsdkConfigFilePath);

/** Deprecated: Use `tsdk.config.js` instead `.tsdkrc.json` */
export const oldConfigFilePath = path.join(process.cwd(), '.tsdkrc.json');
export const isOldConfigExist = fs.existsSync(oldConfigFilePath);

export const isConfigExist = isTsdkConfigExist || isOldConfigExist;

if (isTsdkConfigExist) {
  console.log(symbols.info, `load ${tsdkConfigFilePath}`);
}

// Load configuration safely
const baseConfigPath = path.join(__dirname, '..', 'fe-sdk-template', 'config', 'tsdk.config.js');
const baseConfig = fs.existsSync(baseConfigPath) ? require(baseConfigPath) : {};
const oldConfig = isOldConfigExist ? JSON.parse(fs.readFileSync(oldConfigFilePath, 'utf-8')) : {};
const newConfig = isTsdkConfigExist ? require(tsdkConfigFilePath) : {};

export const config: TSDKConfig = {
  ...baseConfig,
  ...oldConfig,
  ...newConfig,
};

// example: ./src => src
// Ensure baseDir normalization
if (config.baseDir) {
  config.baseDir = path.normalize(config.baseDir);
}

function getPackageFolder(name: string) {
  if (name[0] === '@') {
    return name.split('/')[1];
  }
  return name;
}

export const packageFolder = getPackageFolder(config.packageName);
export const ensureDir = path.join(config.packageDir, packageFolder);

const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');
export const tsconfigExists = fs.existsSync(tsconfigPath);

export const tsconfig = tsconfigExists
  ? eval(`(() => (${fs.readFileSync(tsconfigPath, 'utf-8')}))();`).compilerOptions
  : {};
let deps: { [key: string]: string } = {};

export const pkg: { [key: string]: any } = {};

export async function parsePkg() {
  const content = await fs.promises.readFile(path.join(__dirname, '..', 'package.json'), 'utf-8');
  Object.assign(pkg, JSON.parse(content));
  return pkg;
}

export async function parseDeps() {
  const content = await fs.promises.readFile(path.join(ensureDir, 'package.json'), 'utf-8');
  const pkgJSON = JSON.parse(content);
  Object.assign(pkg, pkgJSON);
  deps = {
    ...(pkgJSON.dependencies || {}),
    ...(pkgJSON.devDependencies || {}),
    ...(pkgJSON.peerDependencies || {}),
  };
}

export function getDeps() {
  return deps;
}
